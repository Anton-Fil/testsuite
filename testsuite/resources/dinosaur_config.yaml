apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: dinosaur-template
objects:
- apiVersion: authorino.kuadrant.io/v1beta1
  kind: AuthConfig
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}
    labels:
      testRun: ${LABEL}
  spec:
    hosts:
      - ${HOST}
    patterns:
      api-route:
        - selector: context.request.http.path
          operator: matches
          value: ^/anything/dinosaurs_mgmt/.+
      v1-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":3}"
          operator: eq
          value: v1
      dinosaurs-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: dinosaurs
      dinosaur-resource-route:
        - selector: context.request.http.path
          operator: matches
          value: /dinosaurs/[^/]+$
      create-dinosaur-route:
        - selector: context.request.http.path
          operator: matches
          value: /dinosaurs/?$
        - selector: context.request.http.method
          operator: eq
          value: POST
      metrics-federate-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: dinosaurs
        - selector: context.request.http.path
          operator: matches
          value: /metrics/federate$
      service-accounts-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: service_accounts
      supported-instance-types-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: instance_types
      agent-clusters-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: agent-clusters
      admin-route:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: eq
          value: admin
      acl-required:
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: neq
          value: agent-clusters
        - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
          operator: neq
          value: admin
      redhat-sso:
        - selector: auth.identity.iss
          operator: eq
          value: ${RHSSO_ISSUER}
      admin-sso:
        - selector: auth.identity.iss
          operator: eq
          value: ${ADMIN_ISSUER}
      require-org-id:
        - selector: auth.identity.org_id
          operator: neq
          value: ""
    when:
      - patternRef: api-route
      - patternRef: v1-route
    identity:
      - name: redhat-sso
        oidc:
          endpoint: ${RHSSO_ISSUER}
          ttl: 3600
        extendedProperties:
          - name: org_id
            valueFrom: {authJSON: auth.identity.middle_name}
      - name: admin-sso
        when:
        - patternRef: admin-route
        oidc:
          endpoint: ${ADMIN_ISSUER}
          ttl: 3600
    #TMP
    response:
      - json:
          properties:
            - name: auth
              valueFrom:
                authJSON: auth
            - name: context
              valueFrom:
                authJSON: context
        name: auth-json
    metadata:
      - name: terms-and-conditions
        when:
          - patternRef: create-dinosaur-route
        http:
          endpoint: ${TERMS_AND_CONDITIONS}
          method: GET
          contentType: application/json
      - name: cluster-info
        when:
          - patternRef: agent-clusters-route
        http:
          endpoint: ${CLUSTER_INFO}
          method: GET
          contentType: application/json
      - name: resource-info
        when:
          - patternRef: dinosaur-resource-route
        http:
          endpoint: ${RESOURCE_INFO}
          method: GET
          contentType: application/json
    authorization:
      - name: bearer-token
        json:
          rules:
            - selector: auth.identity.typ
              operator: eq
              value: Bearer
      - name: deny-list
        when:
          - patternRef: acl-required
        opa:
          inlineRego: |
            list := [
              "denied-test-user1@example.com"
            ]
            denied { list[_] == input.auth.identity.email }
            allow { not denied }
      - name: allow-list
        when:
          - patternRef: acl-required
        opa:
          inlineRego: |
            list := [
              "123"
            ]
            allow { list[_] == input.auth.identity.org_id }
      - name: terms-and-conditions
        when:
          - patternRef: create-dinosaur-route
        json:
          rules:
            - selector: auth.metadata.terms-and-conditions.terms_required
              operator: eq
              value: "false"
      - name: dinosaurs
        when:
          - patternRef: dinosaurs-route
        json:
          rules:
            - patternRef: redhat-sso
            - patternRef: require-org-id
      - name: metrics-federate
        when:
          - patternRef: metrics-federate-route
        json:
          rules:
            - patternRef: redhat-sso
            - patternRef: require-org-id
      - name: service-accounts
        when:
          - patternRef: service-accounts-route
        json:
          rules:
            - patternRef: redhat-sso
            - patternRef: require-org-id
      - name: supported-instance-types
        when:
          - patternRef: supported-instance-types-route
        json:
          rules:
            - patternRef: redhat-sso
            - patternRef: require-org-id
      - name: agent-clusters
        when:
          - patternRef: agent-clusters-route
        json:
          rules:
            - patternRef: redhat-sso
      - name: cluster-id
        when:
          - patternRef: agent-clusters-route
        opa:
          inlineRego: |
            allow { input.auth.identity.azp == object.get(input.auth.metadata, "cluster-info", {}).client_id }
      - name: owner
        when:
          - patternRef: dinosaur-resource-route
        opa:
          inlineRego: |
            org_id := input.auth.identity.org_id
            filter_by_org { org_id }
            is_org_admin := input.auth.identity.is_org_admin
            resource_data := object.get(input.auth.metadata, "resource-info", {})
            same_org { resource_data.org_id == org_id }
            is_owner { resource_data.owner == input.auth.identity.azp }
            has_permission { filter_by_org; same_org; is_org_admin }
            has_permission { filter_by_org; same_org; is_owner }
            has_permission { not filter_by_org; is_owner }
            method := input.context.request.http.method
            allow { method == "GET";    has_permission }
            allow { method == "DELETE"; has_permission }
            allow { method == "PATCH";  has_permission }
      - name: admin-rbac
        when:
          - patternRef: admin-route
          - patternRef: admin-sso
        opa:
          inlineRego: |
            method := input.context.request.http.method
            roles := input.auth.identity.realm_access.roles
            allow { method == "GET";    roles[_] == "admin-full" }
            allow { method == "GET";    roles[_] == "admin-read" }
            allow { method == "GET";    roles[_] == "admin-write" }
            allow { method == "PATCH";  roles[_] == "admin-full" }
            allow { method == "PATCH";  roles[_] == "admin-write" }
            allow { method == "DELETE"; roles[_] == "admin-full" }
      - name: admin-redhat-rhsso
        when:
          - patternRef: admin-route
          - patternRef: redhat-sso
        opa:
          inlineRego: |
            allow { false }
      - name: internal-endpoints
        json:
          rules:
            - selector: "context.request.http.path.@extract:{\"sep\":\"/\",\"pos\":4}"
              operator: neq
              value: authz-metadata
    denyWith:
      unauthorized:
        headers:
          - name: content-type
            value: "application/json"
        body:
          value: |
            {
              "kind": "Error",
              "id": "403",
              "href": "/api/dinosaurs_mgmt/v1/errors/403",
              "code": "DINOSAURS-MGMT-403",
              "reason": "Forbidden"
            }
parameters:
- name: NAME
  description: "Name for the resources created"
  required: true
- name: NAMESPACE
  description: "Namespace of the resources created"
  required: true
- name: LABEL
  description: "Test run label for all resources"
  required: true
- name: HOST
  description: "Authorino host"
  required: true
- name: RHSSO_ISSUER
  description: "Issuer url of RHSSO"
  required: true
- name: ADMIN_ISSUER
  description: "Issuer url of admin RHSSO"
  required: true
- name: TERMS_AND_CONDITIONS
  description: "URl for terms-and-conditions metadata"
  required: true
- name: CLUSTER_INFO
  description: "URl for cluster-info metadata"
  required: true
- name: RESOURCE_INFO
  description: "URl for resource-info metadata"
  required: true